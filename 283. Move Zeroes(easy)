Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
___________________________________________________________________________________________________________________________________________________
// class Solution {
//     public void moveZeroes(int[] nums) {            //here if 0 finds then swap it until end //my logic

//         for(int i=0;i<nums.length; i++)
//         {
//             if(nums[i]==0)
//             {
//                 for(int j=i; j<nums.length-1; j++)
//                 {
//                     nums[j]=nums[j]+nums[j+1];
//                     nums[j+1]=nums[j]-nums[j+1];
//                     nums[j]=nums[j]-nums[j+1];
//                 }
//                 i--;
//             }
//         }
        
//     }
// }

 class Solution {
    public void moveZeroes(int[] nums) {    //good logic  //All test cases passed // copied
        int j=0;
        for(int i=0; i<nums.length; i++)
        {
            if(nums[i]!=0)
            {
                nums[j]=nums[i];
                j++;
            }
        }
        while(j<nums.length)
        {
            nums[j]=0;
                j++;
        }
    }
}
______________________________________________________________________________________________________________________



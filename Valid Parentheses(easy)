Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
________________________________________________________________________________________________________________________
// class Solution {                              //65 out of 95 test cases passed
//     public boolean isValid(String s) {
//         boolean answer = false;
//         for(int i=0; i<s.length();i++)
//         {
//             if(s.charAt(i)=='(')
//             {
//                 answer=false;
//                 for(int k=i+1; k<s.length();k++)
//                 {
//                     if(s.charAt(k)==')')
//                     {
//                         answer=true;
//                     }
//                 }
//             }

//             if(s.charAt(i)=='[')
//             {
//                 answer=false;
//                 for(int k=i+1; k<s.length();k++)
//                 {
//                     if(s.charAt(k)==']')
//                     {
//                         answer=true;
//                     }
//                 }
//             }

//             if(s.charAt(i)=='{')
//             {
//                 answer=false;
//                 for(int k=i+1; k<s.length();k++)
//                 {
//                     if(s.charAt(k)=='}')
//                     {
//                         answer=true;
//                     }
//                 }
//             }
//         }
//         return answer;
        
//     }
// }

______________________________________________________________________________________________________________________________
class Solution {                                                          //copied answer
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>(); // create an empty stack
        for (char c : s.toCharArray()) { // loop through each character in the string
            if (c == '(') // if the character is an opening parenthesis
                stack.push(')'); // push the corresponding closing parenthesis onto the stack
            else if (c == '{') // if the character is an opening brace
                stack.push('}'); // push the corresponding closing brace onto the stack
            else if (c == '[') // if the character is an opening bracket
                stack.push(']'); // push the corresponding closing bracket onto the stack
            else if (stack.isEmpty() || stack.pop() != c) // if the character is a closing bracket
                // if the stack is empty (i.e., there is no matching opening bracket) or the top of the stack
                // does not match the closing bracket, the string is not valid, so return false
                return false;
        }
        // if the stack is empty, all opening brackets have been matched with their corresponding closing brackets,
        // so the string is valid, otherwise, there are unmatched opening brackets, so return false
        return stack.isEmpty();
    }
}
_______________________________________________________________________________________________________________________________________

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?
_________________________________________________________________________________________________________________________________________________
// class Solution {                                                          //my solution (only 12 out of 59 test cases passed)
//     public void merge(int[] nums1, int m, int[] nums2, int n) {
//         int arr []= new int[nums1.length];
//         int count=0;
//         if(m!=0 && n!=0)
//         {
//             int j=0;
//             int i =0;
//             while(count<arr.length)
//             {
//                     if(nums1[i]==0 && j<nums2.length)
//                     {
//                         arr[count++]=nums2[j];
//                         System.out.println("arr = "+arr[count-1]);
//                         j++;
//                     }
//                     else if(nums2[j]==nums1[i])
//                     {
//                         arr[count++]=nums1[i];
//                         System.out.println("arr = "+arr[count-1]);
//                         arr[count++]=nums2[j];
//                         System.out.println("arr = "+arr[count-1]);
//                         i++;
//                         j++;
                        
//                     }
//                     else if(nums2[j]<nums1[i])
//                     {
//                         arr[count++]=nums2[j];
//                         System.out.println("arr = "+arr[count-1]);
//                         j++;
//                         if(j==nums2.length)
//                         {
//                             for(;i<nums1.length;i++)
//                             {
//                                 if(nums1[i]!=0)
//                                 {
//                                     arr[count++]=nums1[i];
//                                 }
                                
//                             }
//                         }
                        
//                     }
//                     else if(nums1[i]<nums2[j] )
//                     {
//                         arr[count++]=nums1[i];
//                         System.out.println("arr = "+arr[count-1]);
//                         i++;
//                     }  
//             }
//             System.out.println("arr = "+Arrays.toString(arr));
//             for(int x=0; x<arr.length;x++)
//             {
//                 nums1[x]=arr[x];
//             }
//         }
//         else
//         {
//             nums1[0]=1;
//         }  
//     }
// }


class Solution {                                                  //copied solution 
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        for(int i=0, j=m; j<nums1.length;j++,i++)
        {
            nums1[j] = nums2[i];
        }
        Arrays.sort(nums1);

    }
}
_______________________________________________________________________________________________________________

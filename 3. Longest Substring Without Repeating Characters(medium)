Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
__________________________________________________________________________________________________________________
class Solution {
    public int lengthOfLongestSubstring(String s) {                               //976 out of 987 test cases passed //my code
            int n = s.length();
	        String [] strArr = new String[n*(n+1)/2];
	        int x=0;
	        int lastCount=0;
	        for(int i=0; i<s.length(); i++)
	        {
	            for(int j=i; j<s.length(); j++)
	            {
	                strArr[x]=s.substring(i,j+1);
//	                System.out.println("strArr "+strArr[x]);      //printing substrings
	                x++;
	            }
	        }
	        for(int i=0; i<strArr.length; i++)
	        {
	            int count =0;
//	            System.out.println("strArr "+strArr[i]);          //printing substrings
	            for(int j=0; j<strArr[i].length()-1; j++)
	            { 
	                for(int k=j+1; k<strArr[i].length(); k++)
	                {
	                    if(strArr[i].charAt(j)==strArr[i].charAt(k))   //comparing every character of single string of array 
	                    {                                              //to check there is repeating character or not   
	                        count++;
	                    }
	                }
	               
	            }
	             if(count==0)
	                {
	                    if(lastCount<strArr[i].length())
	                        lastCount=strArr[i].length();
	                }
	        }
            return lastCount;
        
    }
}
______________________________________________________________________________________________________________________________________
class Solution {                                                        //All test cases passsed
    public int lengthOfLongestSubstring(String s) {                     //only copied for submitting //  not samja 
        Map<Character,Integer> map = new HashMap<Character,Integer>();
        int start = 0; int maxLength = 0;
        for(int end = 0; end < s.length(); end++){
            char rightChar = s.charAt(end);
            if(map.containsKey(rightChar)){
                start = Math.max(start,map.get(rightChar)+1); 
            }
            map.put(rightChar,end);
            maxLength = Math.max(maxLength,end-start+1);
        }
        return maxLength;
    }
}
_______________________________________________________________________________________________________________________________________________

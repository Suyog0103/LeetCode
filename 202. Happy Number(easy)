Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1
_________________________________________________________________________________________________________________________________________
// class Solution {                           //only 1 test case passed for other time limit exceeded
//     public boolean isHappy(int n) {        //when no repeats itself at that time we know no is not happy no
//         int lastNo =0;
//         int temp=n;
//         while(lastNo!=1)
//         {
//             int s=0;
//             while(temp!=0)
//             {
//                 int mod = temp%10;
//                 int square = mod * mod;
//                 s=s + square;
//                 // System.out.println("s = "+s);
//                 temp=temp/10;
//                 // System.out.println("temp = "+temp);
//             }
//             if(s==1)
//             {
//                 lastNo=1;
//             }
//             else
//             {
//                 if(s==n)
//                     return false;                 //for not happy no
                
//                     temp=s;
//                 // System.out.println("s = "+s);
//             }
//         }
//         return true;
//     }
// }
_________________________________________________________________________________________________________
import java.util.LinkedList;
                                                        //copied and understood
class Solution {
    public boolean isHappy(int n) {
        
        int slow = n;
        int fast = n;
//while loop is not used here because initially slow and 
//fast pointer will be equal only, so the loop won't run.
        do {
//slow moving one step ahead and fast moving two steps ahead

            slow = square(slow);
            fast = square(square(fast));
        } while (slow != fast);

//if a cycle exists, then the number is not a happy number
//and slow will have a value other than 1

        return slow == 1;
    }
    
//Finding the square of the digits of a number

    public int square(int num) {
        
        int ans = 0;
        
        while(num > 0) {
            int remainder = num % 10;
            ans += remainder * remainder;
            num /= 10;
        }
        
        return ans;
    }
}
______________________________________________________________________________________________
